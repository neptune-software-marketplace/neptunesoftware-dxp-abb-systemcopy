{
	"id": "cdbe5c1b-c6e8-ec11-b656-0050f2a2304b",
	"createdAt": "2022-06-10T14:03:31.183Z",
	"createdBy": "jens-uwe.gross@neptune-software.com",
	"globalScripts": [],
	"externalModules": [],
	"entitySets": [],
	"apis": [],
	"name": "saveUsers",
	"ver": "22.11.14.134",
	"description": "save system users via SQL",
	"content": [
		"==OBJECT STRING==",
		"/**\r",
		" * Main Logic\r",
		" */\r",
		"try {\r",
		"  const users = req.body.data;\r",
		"  const schema = await getSchema();\r",
		"\r",
		"  if (schema === null) {\r",
		"    result.data = \"No schema found\";\r",
		"    complete();\r",
		"    return;\r",
		"  }\r",
		"  const existingRoleIds = await getRoleIds(schema);\r",
		"\r",
		"  // 1. Insert users into database\r",
		"  for (let user of users) {\r",
		"    log.info(user.data);\r",
		"    insertUser(schema, user.data);\r",
		"  }\r",
		"\r",
		"  // 2. Insert roles into database\r",
		"  for (let user of users) {\r",
		"    insertUserRoles(schema, user.roles, existingRoleIds);\r",
		"  }\r",
		"\r",
		"  result.data = \"OK\";\r",
		"  complete();\r",
		"\r",
		"  // 3. \r",
		"  await entityManager.save(req.body.table, req.body.data);\r",
		"  complete();\r",
		"} catch (e) {\r",
		"  log.error(e);\r",
		"  fail();\r",
		"}\r",
		"\r",
		"/**\r",
		" * Utility Functions\r",
		" */\r",
		"async function getSchema() {\r",
		"  let query = await entityManager.query(\"select * from information_schema.schemata where schema_name = 'planet9'\");\r",
		"  if (query.length > 0) {\r",
		"    return 'planet9';\r",
		"  }\r",
		"  query = await entityManager.query(\"select * from information_schema.schemata where schema_name = 'dbo'\");\r",
		"  if (query.length > 0) {\r",
		"    return 'dbo';\r",
		"  }\r",
		"  return null;\r",
		"}\r",
		"\r",
		"async function getRoleIds(schema) {\r",
		"  const roles = await entityManager.query('SELECT * FROM ' + schema + '.role;');\r",
		"  return roles.map(role => role.id);\r",
		"}\r",
		"\r",
		"async function insertUser(schema, user) {\r",
		"  const fieldNames = Object.keys(user)\r",
		"    .map(key => `'${key}'`)\r",
		"    .join(\",\");\r",
		"\r",
		"  const values = Object.values(user)\r",
		"    .map(value => value === null ? \"null\" : `\"${value}\"`)\r",
		"    .join(\",\");\r",
		"\r",
		"  const insertQuery = `INSERT INTO ${schema}.users (${fieldNames}() VALUES (${values});`;\r",
		"\r",
		"  try {\r",
		"    const query = await entityManager.query(insertQuery);\r",
		"    log.info(`Succeeded to insert user. ${query}`);\r",
		"  } catch (e) {\r",
		"    log.error(`Failed to insert user.`)\r",
		"    log.error(e);\r",
		"  }\r",
		"\r",
		"}\r",
		"\r",
		"async function insertUserRoles(schema, roles, existingRoles) {\r",
		"  for (let role of roles) {\r",
		"    if (!existingRoles.includes(role.role_users)) continue;\r",
		"    const inserQuery = `INSERT INTO ${schema}.role_users__users_roles (\"role_users\", \"users_roles\") VALUES ('${role.role_users}','${role.users_roles}');`;\r",
		"    log.info(inserQuery);\r",
		"    await entityManager.query(inserQuery);\r",
		"  }\r",
		"}\r",
		""
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "eeb7d97b-63c6-ec11-997e-dc9840109182",
	"package": "e8ab41b8-63c6-ec11-997e-dc9840109182"
}